# -*- coding: utf-8 -*-
"""Wine quality predict model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oZ0Z7I_mUPFYaieDpxeXbTxzfwV0-xs-
    
This model predict with STD and Mean of below:
mean is:0.425076384249193 and standard derivation is:0.034969336980075726
"""

import pandas as pd
from tensorflow.python.keras import Sequential
from tensorflow.python.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np
from sklearn.preprocessing import StandardScaler

data = pd.read_csv('dataset/winequality-white.csv')

n_cols = data.shape[1]

model = Sequential()

model.add(Dense(units=10, activation='relu', input_shape=(n_cols-1,)))
model.add(Dense(units=10, activation='relu', input_shape=(n_cols-1,)))
model.add(Dense(units=10, activation='relu', input_shape=(n_cols-1,)))
model.add(Dense(units=10, activation='relu', input_shape=(n_cols-1,)))
model.add(Dense(units=10, activation='relu', input_shape=(n_cols-1,)))

model.add(Dense(units=1))

model.compile(loss='mean_squared_error', optimizer='adam')
y = data.quality
x = data.drop('quality', axis=1)
y = y.values
x = x.values

msn = []
scaler = StandardScaler()

for items in range(0,51):
  xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size = 0.3)
  scaler.fit(xTrain)
  xTrain = scaler.transform(xTrain)
  xTest = scaler.transform(xTest)
  model.fit(xTrain, yTrain, epochs=100)
  predicted_y = model.predict(xTest)
  msn.append(mean_squared_error(yTest, predicted_y))

msn_arr = np.array(msn)
print('mean is:{} and standard derivation is:{}'.format(np.mean(msn_arr), np.std(msn_arr)))


